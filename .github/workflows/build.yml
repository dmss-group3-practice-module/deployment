name: fEATs CD pipeline

on:
  push:
  # pull_request:
  # push:
  #   branches:
  #     - main
  workflow_dispatch: # Allows manual triggers

jobs:
  cd:
    timeout-minutes: 60

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: pipeline

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies for Playwright e2e tests
        run: |
          npm install
          npx playwright install --with-deps
        working-directory: ./scripts/e2e

      - name: Set environment variables for Playwright and Artillery tests
        run: |
          echo "TEST_URL=${{ secrets.TEST_URL }}" >> $GITHUB_ENV
          echo "INGREDIENT_BACKEND_URL=${{ secrets.INGREDIENT_BACKEND_URL }}" >> $GITHUB_ENV

      - name: Run e2e tests
        run: npx playwright test
        working-directory: ./scripts/e2e

      - name: Upload Playwright e2e test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results
          path: ./scripts/e2e/test-results/index.html
          retention-days: 30

      - name: Install Artillery
        run: npm install -g artillery
      
      - name: Run load test
        run: |
           artillery run --output report.json load-test.yml
           artillery report report.json
        working-directory: ./scripts

      - name: Upload Artillery load test results
        uses: actions/upload-artifact@v4
        with:
          name: artillery-results
          path: scripts/report.json.html
          retention-days: 30

  update-image-version:
    needs: cd

    runs-on: ubuntu-latest

    # if: ${{ github.event_name == 'workflow_dispatch' }}

    steps:
      - uses: actions/checkout@v4

      - name: Find current test images versions
        run: |
          cd k8s/test
          FRONTEND_IMAGE_VERSION=$(grep -oP '(?<=image: registry.digitalocean.com/group3/feats-frontend:)[^ ]*' frontend-test.yml)
          BACKEND_IMAGE_VERSION=$(grep -oP '(?<=image: registry.digitalocean.com/group3/feats-backend:)[^ ]*' backend-test.yml)
          echo "Current frontend image version: $FRONTEND_IMAGE_VERSION"
          echo "Current backend image version: $BACKEND_IMAGE_VERSION"
          env:
            FRONTEND_IMAGE_VERSION: $FRONTEND_IMAGE_VERSION
            BACKEND_IMAGE_VERSION: $BACKEND_IMAGE_VERSION

      - name: Update image version for test in Kubernetes YML
        # if: github.ref == 'refs/heads/main'
        run: |
          cd k8s/test
          sed -i "s|image: registry.digitalocean.com/group3/feats-frontend:[^ ]*|image: registry.digitalocean.com/group3/feats-frontend:$FRONTEND_IMAGE_VERSION|" frontend-test.yml
          sed -i "s|image: registry.digitalocean.com/group3/feats-backend:[^ ]*|image: registry.digitalocean.com/group3/feats-backend:$BACKEND_IMAGE_VERSION|" backend-test.yml
          cat frontend-test.yml
          cat backend-test.yml
          echo "Updated the image version in frontend-test.yml to $FRONTEND_IMAGE_VERSION"
          echo "Updated the image version in backend-test.yml to $BACKEND_IMAGE_VERSION"
        env:
          FRONTEND_IMAGE_VERSION: ${{ env.FRONTEND_IMAGE_VERSION }}
          BACKEND_IMAGE_VERSION: ${{ env.BACKEND_IMAGE_VERSION }}

      - name: Commit changes to the deployment repository
        # if: github.ref == 'refs/heads/main'
        run: |
          cd deployment
          echo "Current directory: $(pwd)"
          git config --global user.email "pinardy.yang@gmail.com"
          git config --global user.name "GitHub Action"
          git add k8s/prod/frontend-prod.yml
          git commit -m "[frontend-prod] update image version to ${{ env.IMAGE_VERSION }}"
          git add k8s/prod/backend-prod.yml
          git commit -m "[backend-prod] update image version to ${{ env.IMAGE_VERSION }}"
        env:
          IMAGE_VERSION: ${{ steps.package-version.outputs.current-version}}

      - name: Pushes to deployment repository
        # if: github.ref == 'refs/heads/main'
        uses: cpina/github-action-push-to-another-repository@main
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        with:
          source-directory: './deployment'
          destination-github-username: 'dmss-group3-practice-module'
          destination-repository-name: 'deployment'
          user-email: pinardy.yang@gmail.com
