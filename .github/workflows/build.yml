name: fEATs CD pipeline

on:
  push:
  # pull_request:
  # push:
  #   branches:
  #     - main
  workflow_dispatch: # Allows manual triggers

jobs:
  cd:
    timeout-minutes: 60

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: pipeline

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies for Playwright e2e tests
        run: |
          npm install
          npx playwright install --with-deps
        working-directory: ./scripts/e2e

      - name: Set environment variables for Playwright and Artillery tests
        run: |
          echo "TEST_URL=${{ secrets.TEST_URL }}" >> $GITHUB_ENV
          echo "INGREDIENT_BACKEND_URL=${{ secrets.INGREDIENT_BACKEND_URL }}" >> $GITHUB_ENV

      - name: Run e2e tests
        run: npx playwright test
        working-directory: ./scripts/e2e

      - name: Upload Playwright e2e test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results
          path: ./scripts/e2e/test-results/index.html
          retention-days: 30

      - name: Install Artillery
        run: npm install -g artillery
      
      - name: Run load test
        run: |
           artillery run --output report.json load-test.yml
           artillery report report.json
        working-directory: ./scripts

      - name: Upload Artillery load test results
        uses: actions/upload-artifact@v4
        with:
          name: artillery-results
          path: scripts/report.json.html
          retention-days: 30

  # update-image-version:
  #   needs: cd

  #   runs-on: ubuntu-latest

  #   if: ${{ github.event_name == 'workflow_dispatch' }}

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: get-npm-version
  #       if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #       id: package-version
  #       uses: martinbeentjes/npm-get-version-action@v1.3.1

  #     - name: Clone target repository
  #       if: github.ref == 'refs/heads/main'
  #       run: |
  #         echo "Cloning repository..."
  #         git clone https://x-access-token:${{ secrets.TARGET_REPO_TOKEN }}@github.com/dmss-group3-practice-module/deployment.git
  #         echo "Cloned repository, checking structure:"
  #         ls -la deployment

  #     - name: Update image version in Kubernetes YML
  #       if: github.ref == 'refs/heads/main'
  #       run: |
  #         cd deployment
  #         sed -i "s|image: registry.digitalocean.com/group3/feats-frontend:[^ ]*|image: registry.digitalocean.com/group3/feats-frontend:$IMAGE_VERSION|" k8s/test/frontend-test.yml
  #         cat k8s/test/frontend-test.yml
  #         echo "Updated the image version in frontend-test.yml to $IMAGE_VERSION"
  #       env:
  #         IMAGE_VERSION: ${{ steps.package-version.outputs.current-version}}

  #     - name: Commit changes to the deployment repository
  #       if: github.ref == 'refs/heads/main'
  #       run: |
  #         cd deployment
  #         echo "Current directory: $(pwd)"
  #         git config --global user.email "pinardy.yang@gmail.com"
  #         git config --global user.name "GitHub Action"
  #         git add k8s/test/frontend-test.yml
  #         git commit -m "[frontend-test] update image version to ${{ env.IMAGE_VERSION }}"
  #       env:
  #         IMAGE_VERSION: ${{ steps.package-version.outputs.current-version}}

  #     - name: Pushes to deployment repository
  #       if: github.ref == 'refs/heads/main'
  #       uses: cpina/github-action-push-to-another-repository@main
  #       env:
  #         SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
  #       with:
  #         source-directory: './deployment'
  #         destination-github-username: 'dmss-group3-practice-module'
  #         destination-repository-name: 'deployment'
  #         user-email: pinardy.yang@gmail.com
